from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram import types
from aiogram.dispatcher.filters import Text

from aiogram.utils.callback_data import CallbackData
from services.service import *

cardClose = CallbackData("post", "card_id", "chat_id", "action")
skipCard = CallbackData("post", "action")


@dp.message_handler(Text(equals="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è"), state=None)
async def userConnect(message: types.Message):
    if (getGameStatus()):
        if(usersCount() < getMaxUsersValue()):
            chat_id = message.chat.id
            connectUser(chat_id)
            card_id = addCardToUser(chat_id)

            keyboard = types.InlineKeyboardMarkup()
            await message.answer("<b>–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å</b>, –æ–∂–∏–¥–∞–π—Ç–µ —Å–≤–æ—é –∫–∞—Ä—Ç–æ—á–∫—É", reply_markup=ReplyKeyboardRemove())
            await message.answer_dice(emoji="üé∞")

            button = types.InlineKeyboardButton(
                text=f"–Ø –≤—ã–∏–≥—Ä–∞–ª!",
                callback_data=cardClose.new(
                    card_id=card_id, chat_id=chat_id, action="del")
            )
            keyboard.add(button)
            print(f"{card_id} –≤—ã–ø–∞–ª–∞")
            await message.answer(f"–í–∞—à–∞ –∫–∞—Ä—Ç–∞ <b>{card_id}</b>")
            await message.answer_photo(photo=open(f'cards/loto-{card_id}.jpg', 'rb'),
                                       reply_markup=keyboard)
        else:
            await message.answer("–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞")

    else:
        await message.answer("–ò–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å")


@dp.callback_query_handler(cardClose.filter(action="del"))
async def process_callback_cardClose(call: types.CallbackQuery, callback_data: dict):

    card_id = int(callback_data["card_id"])
    chat_id = int(callback_data["chat_id"])
    twitch_name = getTwitchName(chat_id)

    isWin(chat_id)

    if (not isWin(chat_id)):
        if(getGameStatus()):
            await bot.send_message(call.from_user.id, '–í—ã –Ω–µ —Å–æ–±—Ä–∞–ª–∏ –Ω—É–∂–Ω—ã–µ —á–∏—Å–ª–∞!')
        else:
            await bot.send_message(call.from_user.id, '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω,'
                                   ' –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –≤—ã —É—Å–ø–µ–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –±—ã—Å—Ç—Ä–µ–µ –Ω–µ–≥–æ')
        await call.answer()
    else:
        try:
            await bot.delete_message(call.message.chat.id, call.message.message_id - 1)
            await call.message.delete()
        except:
            print("–°—Ç—Ä–æ–∫–∞ 54")

        await bot.send_message(call.from_user.id, '–ö–∞—Ä—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É\n'
                                                  '–ø–æ —Ç–µ—Ö –≤–æ–ø—Ä–æ—Å–∞–º –∫ @mironchikk')

        #keyboard = types.InlineKeyboardMarkup()
        # button = types.InlineKeyboardButton(
        #    text=f"–°–∫–∏–ø–Ω—É—Ç—å",
        #    callback_data=skipCard.new(action="skip")
        # )
        # keyboard.add(button)
        for chat_id in getAdmins():
            await bot.send_message(chat_id, f"–ü–æ–±–µ–¥–∏–ª! \n <b>{twitch_name}</b>")
            await bot.send_photo(chat_id, photo=open(f'cards/loto-{card_id}.jpg', 'rb'))
        await call.answer()
    # except:
    #    await call.message.answer("–ö–∞—Ä—Ç—ã –Ω–µ—Ç –≤ –±–∞–∑–µ, —Å–æ—Ä–∏ –º–æ–π –∫–æ—Å—è–∫, —Ñ–∏–∫—Å –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    #    await call.answer()


@dp.callback_query_handler(skipCard.filter(action="skip"))
async def skipCard_CardClose(call: types.CallbackQuery):
    try:
        await bot.delete_message(call.message.chat.id, call.message.message_id - 1)
    except:
        print("–°—Ç—Ä–æ–∫–∞ 74")
    await call.message.delete()
    await call.answer()


@dp.message_handler(Text(equals="–ù–µ—Ç"), state=None)
async def userConnect(message: types.Message):
    try:
        await bot.delete_message(message.chat.id, message.message_id - 1)
    except:
        await message.answer("–Ω—É –æ–∫")

    await message.answer("<b>–ì–ê–õ–Ø–Ø–Ø –û–¢–ö–ê–ê–ê–¢!</b>", reply_markup=ReplyKeyboardRemove())


@dp.message_handler(commands=['stop'])
async def stop(message: types.Message):
    if (isAdmin(message.chat.id)):
        print(getGameStatus())
        if (getGameStatus()):
            try:
                for chat_id in getUserMailingInSession():
                    await bot.send_message(chat_id[0], "<b>–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n"
                                                       "–ø–æ —Ç–µ—Ö –≤–æ–ø—Ä–æ—Å–∞–º –∫ @mironchikk")
                stopSession()
                await bot.send_message(message.chat.id, "–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∏–≥—Ä—É")
            except:
                await message.answer("–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        else:
            await message.answer("–ò–≥—Ä–∞ —É–∂–µ –∑–∞–∫–æ–Ω—á–µ–Ω–∞!")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤")

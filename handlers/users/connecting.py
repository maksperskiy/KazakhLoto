from aiogram.types import ReplyKeyboardRemove
from aiogram import types
from aiogram.dispatcher.filters import Text
from loader import dp, bot

from aiogram.utils.callback_data import CallbackData
from services.service import *

cardClose = CallbackData("post", "card_id", "chat_id", "action")
skipCard = CallbackData("post", "action")


@dp.message_handler(Text(contains="—Ä–∏—Å–æ–µ–¥"), state=None)
async def user_connect(message: types.Message):
    if isGameStarted():
        if usersCount() < getMaxUsersValue():
            chat_id = message.chat.id
            connectUser(chat_id)

            keyboard = types.InlineKeyboardMarkup()
            await message.answer("<b>–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å</b>, –æ–∂–∏–¥–∞–π—Ç–µ —Å–≤–æ—é –∫–∞—Ä—Ç–æ—á–∫—É", reply_markup=ReplyKeyboardRemove())
            await message.answer_dice(emoji="üé∞")

            card_id = addCardToUser(chat_id)
            button = types.InlineKeyboardButton(
                text=f"–Ø –≤—ã–∏–≥—Ä–∞–ª!",
                callback_data=cardClose.new(
                    card_id=card_id, chat_id=chat_id, action="del")
            )
            keyboard.add(button)
            print(f"{card_id} –≤—ã–ø–∞–ª–∞")
            await message.answer(f"–í–∞—à–∞ –∫–∞—Ä—Ç–∞ <b>{card_id}</b>")
            await message.answer_photo(photo=open(f'cards/loto-{card_id}.jpg', 'rb'),
                                       reply_markup=keyboard)
        else:
            await message.answer("–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞")

    else:
        await message.answer("–ò–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å")


@dp.callback_query_handler(cardClose.filter(action="del"))
async def win_check(call: types.CallbackQuery, callback_data: dict):

    card_id = int(callback_data["card_id"])
    chat_id = int(callback_data["chat_id"])
    twitch_name = getTwitchName(chat_id)

    isWin(chat_id)

    if not isWin(chat_id):
        if isGameStarted():
            await bot.send_message(call.from_user.id, '–í—ã –Ω–µ —Å–æ–±—Ä–∞–ª–∏ –Ω—É–∂–Ω—ã–µ —á–∏—Å–ª–∞!')
        else:
            await bot.send_message(call.from_user.id, '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω,'
                                   ' –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –≤—ã —É—Å–ø–µ–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –±—ã—Å—Ç—Ä–µ–µ –Ω–µ–≥–æ')
        await call.answer()
    else:
        try:
            await bot.delete_message(call.message.chat.id, call.message.message_id - 1)
            await call.message.delete()
        except:
            print("–°—Ç—Ä–æ–∫–∞ 62")

        await bot.send_message(call.from_user.id, '–ö–∞—Ä—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É\n'
                                                  '–ø–æ —Ç–µ—Ö –≤–æ–ø—Ä–æ—Å–∞–º –∫ @mironchikk')

        for chat_id in getAdmins():
            await bot.send_message(chat_id, f"–ü–æ–±–µ–¥–∏–ª! \n <b>{twitch_name}</b>")
            await bot.send_photo(chat_id, photo=open(f'cards/loto-{card_id}.jpg', 'rb'))
        await call.answer()


@dp.message_handler(Text(equals="I want to be an admin of this bot"), state=None)
async def get_admin(message: types.Message):
    try:
        if not isAdmin(message.chat.id):
            addAdmin(message.chat.id)
            await message.answer("–¢—ã —Å—Ç–∞–ª –∞–¥–º–∏–Ω–æ–º")
        else:
            await message.answer("–¢—ã —É–∂–µ –∞–¥–º–∏–Ω")
    except:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
